name: CI

on:
  push:
    branches: ["main", "develop"]
    tags:
      - '*'
  pull_request:
    branches: ["develop"]

jobs:
  build:
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{github.workspace}}/build" >> "$GITHUB_OUTPUT"

    - name: Configure
      run: >
        cmake -B ${{steps.strings.outputs.build-output-dir}}
        -DCMAKE_CXX_COMPILER=${{matrix.cpp_compiler}}
        -DCMAKE_C_COMPILER=${{matrix.c_compiler}}
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -S ${{github.workspace}}

    - name: Build
      run: cmake --build ${{steps.strings.outputs.build-output-dir}} --config ${{matrix.build_type}}

    - name: GitHubAssistantBot Preprocess (Ubuntu)
      id: preprocess_commits_ubuntu
      if: (success() || failure()) && matrix.os == 'ubuntu-latest'
      run: |
        commits_json=$(cat <<EOL
        ${{toJson(github.event.commits)}}
        EOL
        )
        echo "commits=$(echo "$commits_json" | jq -c '[.[] | {message: .message, url: .url}]' || echo "[]")" >> $GITHUB_OUTPUT

    - name: GitHubAssistantBot Preprocess (Windows)
      id: preprocess_commits_windows
      if: (success() || failure()) && matrix.os == 'windows-latest'
      run: |
        $commits_json = @"
        ${{toJson(github.event.commits)}}
        "@

        $commits = $commits_json | ConvertFrom-Json

        $transformed = $commits | ForEach-Object {
            [PSCustomObject]@{
                message = $_.message
                url     = $_.url
            }
        }

        $result_json = $transformed | ConvertTo-Json -Compress

        if (!($result_json -match '^\[')) {
            $result_json = "[$result_json]"   
        }

        echo "commits=$result_json" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: GitHubAssistantBot
      if: success() || failure()
      uses: fjogeleit/http-request-action@v1
      with:
        url: 'https://node-red.geeken.me/github_assistant_bot'
        data: |
          {
            "key": "${{secrets.ASSISTANT_BOT_KEY}}",
            "actor": "${{github.actor}}",
            "platform": "${{matrix.os}}-${{matrix.c_compiler}}",
            "build": "${{matrix.build_type}}",
            "changes": "https://github.com/${{github.repository}}/commit/${{github.sha}}",
            "commits": ${{steps.preprocess_commits_ubuntu.outputs.commits || steps.preprocess_commits_windows.outputs.commits}},
            "event": "${{github.event_name}}",
            "reference": "${{github.ref_name}}",
            "report": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
            "repository": "${{github.repository}}",
            "status": "${{job.status}}"
          }
